#Installing rdkit and pandas
!pip install rdkit 
from rdkit import Chem, RDLogger
import pandas as pd
from rdkit.Chem import Descriptors, MolSurf, rdMolDescriptors, AllChem

#Creating Variable that will contains the chembl data
sdf_file = 'chembl_31.sdf'

#Variables that will contains some atributes of the dataset
all_mols = Chem.SDMolSupplier(sdf_file)
mol = all_mols[0]

nmols = len(all_mols)
cont_error = 0
str_csv_file = ''
i = all_mols[0]
print(nmols)


#Selecting data that we will use to analyse the dataset
dados = []
for mol in all_mols:
    cont_error += 1
    if(cont_error >= 50000):
        break
    dados.append(Chem.MolToSmiles(mol))
    dados.append(rdMolDescriptors.CalcMolFormula(mol))
    dados.append(round(Descriptors.ExactMolWt(mol),2))
    dados.append(round(Descriptors.MolLogP(mol),2))
    dados.append(Descriptors.NumHAcceptors(mol))
    dados.append(Descriptors.NumHDonors(mol))
    dados.append(rdMolDescriptors.CalcNumRotatableBonds(mol))
    dados.append(round(MolSurf.TPSA(mol),2))
    dados.append(Descriptors.RingCount(mol))
    Chem.MolToMolBlock(mol)

print(str(dados))



#Defining colums and row's that we will use for export to csv
mol_data_colum = ['CANONICAL_SMILES', 'QED_WEIGHTED', 'ALOGP', 'HBA', 'HBD', 'RTB', 'AROMATIC_RINGS', 'PSA']
mol_info_row = []
contador_de_erro = 0
count = 1
for i in all_mols:
  try:
    mol_info_row.append([i.GetProp("CANONICAL_SMILES"), Descriptors.ExactMolWt(i), rdkit.Chem.Crippen.MolLogP(i), rdkit.Chem.Lipinski.NumHAcceptors(i), rdkit.Chem.Lipinski.NumHDonors(i), rdkit.Chem.Lipinski.NumRotatableBonds(i), i.GetRingInfo().NumRings(), Descriptors.rdMolDescriptors.CalcTPSA(i)])
  except:
    contador_de_erro = contador_de_erro +1
  
print(mol_info[:50]) #Limitando n√∫mero de dados para teste

#Firts test part 2
with open(r'tuts@Arturs-MacBook-Air csv_fileChembl', 'w', encoding='UTF8', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(mol_data_colum)
    writer.writerows(mol_info_raw)
