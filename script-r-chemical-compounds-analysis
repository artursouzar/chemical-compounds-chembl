#Instalando Pacotes e Bibliotecas
#Installing Packages and Libraries
install.packages("readxl")
install.packages("tidyverse")
install.packages("data.table")
install.packages("dplyr")
install.packages("ggplot2")
library(dplyr)
library(data.table)
library(tidyverse)
library(readxl)

#Importando Base de Dados
#Importing Data Base
db_chembl <- read.csv2("chEMBLDataBase.csv")

#Filtrando dados
# Creating a Filter for the data
db_chembl_filter <- select(db_chembl,Smiles,HBA,HBD,AlogP,Molecular.Weight,Molecular.Formula,X.Rotatable.Bonds,Polar.Surface.Area, Aromatic.Rings)

#Removendo base de Dados que não vamos mais utilizar depois do filtro
#After remove the filter we can remove the big table with all elements
rm(db_chemb5)

#Visualizando base de dados 
#Viewingdata base
class(db_chembl_filter)
str(db_chembl_filter)
summary(db_chembl_filter)

#Printando para visualizar
#Printing to have a better view at the data
db_chembl_filter$Smiles 
db_chembl_filter$HBA
db_chembl_filter$HBD
db_chembl_filter$AlogP
db_chembl_filter$Molecular.Weight
db_chembl_filter$Molecular.Formula
db_chembl_filter$X.Rotatable.Bonds
db_chembl_filter$Polar.Surface.Area
db_chembl_filter$Polar.Aromatic.Rings

class(db_chembl_filter)

#Testando se a função funcionaria antes de mudar o tipo de cada linha
#Testing if the function would work before changing the class of each row
db_chembl_filter_semNA <- na.omit(db_chembl_filter)
db_chembl_filter_semNA$HBD



#Transformando dados em tipo númerico e Caractere e Criando variáveis
#Switching data type and creating variables
hba <- as.numeric(db_chembl_filter$HBA)
hbd <-as.numeric(db_chembl_filter$HBD)
alogp <-as.numeric(db_chembl_filter$AlogP)
molecular_weight <-as.numeric(db_chembl_filter$Molecular.Weight)
rotatable_bonds <-as.numeric(db_chembl_filter$X.Rotatable.Bonds)
psa <-as.numeric(db_chembl_filter$Polar.Surface.Area)
smiles <-as.character(db_chembl_filter$Smiles)
molecular_formula <-as.character(db_chembl_filter$Molecular.Formula)
ring_count <- as.numeric(db_chembl_filter$Aromatic.Rings)

#Criando novo Data Frame para armazenar novas variáveis e excluindo NA's
#Creating new data frame to load the new variables and excluding the NA's
Novo_df_numerico <- data.frame(hba,hbd,alogp,molecular_formula,molecular_weight,rotatable_bonds,psa,smiles,ring_count)
df_tratado_filtrado<- na.omit(Novo_df_numerico)

#DataFrame Inteiro
#Hole Data Frame
# Correlacao 
# Linear correlation
correlacao_linear <- cor(select(df_tratado_filtrado, alogp, rotatable_bonds, psa, hba, hbd, molecular_weight))


#Variância
#Variance
variancia <- var(df_tratado_filtrado)

#Calculando Desvio-Padrão
#Standard deviation
desvio_hba <- sd(df_tratado_filtrado$hba)
desvio_hbd <- sd(df_tratado_filtrado$hbd)
desvio_alogp <- sd(df_tratado_filtrado$alogp)
desvio_molecular_weight <- sd(df_tratado_filtrado$molecular_weight)
desvio_psa <- sd(df_tratado_filtrado$psa)
desvio_rotatablebonds <- sd(df_tratado_filtrado$rotatable_bonds)

#Criando Data frame pra unificar em uma tabela
#Creating Data Frame to group everything in a table 
desvio_padrao_tabela <- data.frame(desvio_hba,desvio_hbd,desvio_alogp,desvio_molecular_weight,desvio_psa,desvio_rotatablebonds)


#Media e Mediana de Ring Count
#Mean and Median of Ring Count
mean(df_tratado_filtrado$ring_count)
median(df_tratado_filtrado$ring_count)

#Máximo e Mínimo de Ring Count
#Max and Minimum of Ring Counts
i_max_ring <- which.max(df_tratado_filtrado$ring_count)
i_min_ring <- which.min(df_tratado_filtrado$ring_count)
i_max_ring
i_min_ring

#Media e Mediana de Rotatablet
#Mean and Median of Rotatablet
mean(df_tratado_filtrado$rotatable_bonds)
median(df_tratado_filtrado$rotatable_bonds)

#Máximo e Mínimo de Rotatable
#Max and Minimum of rotatable
i_max_rotatable <- which.max(df_tratado_filtrado$rotatable_bonds)
i_min_rotatable <- which.min(df_tratado_filtrado$rotatable_bonds)
i_max_rotatable
i_min_rotatable

#Insights do Peso de cada Molécula
#Insighst Molecular Weight
#Peso Máximo e Mínimo
#Max and Minimum Wheight
max(molWheight)
i_max <- which.max(df_tratado_filtrado$molecular_weight)
min(molWheight)
i_min <- which.min(df_tratado_filtrado$molecular_weight)

#Calculando Variância
#Calculating Variance
varianciaMW <- var(df_tratado_filtrado$molecular_weight)

#Verificando classe e calculando Desvio Padrão
#Verifying class and calculating standar deviation
class(df_tratado_filtrado$molecular_weight)
standardMW <- sd(df_tratado_filtrado$molecular_weight)


#Gráficos 
#Graphics

#Polar Surface Area x Hba
ggplot(df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$hba, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

#Polar Surface Area x Hbd
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$hbd, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

#Polar Surface Area x Molecular Weight
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$molecular_weight, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

#Polar Surface Area x Rotatable Bonds
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$rotatable_bonds, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

#Polar Surface Area x AlogP
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$alogp, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 


# Boxplot of Every Column
boxplot(df_tratado_filtrado$hba)
boxplot(df_tratado_filtrado$Phbd)
boxplot(df_tratado_filtrado$alogp)
boxplot(df_tratado_filtrado$rotatable_bonds)
boxplot(df_tratado_filtrado$molecular_weight)
boxplot(df_tratado_filtrado$do$psa)

#Insights do Peso de cada Molécula
#Insighst Molecular Weight

#Peso Máximo e Mínimo
#Max and Minimum Wheight
max(molWheight)
i_max <- which.max(df_tratado_filtrado$molecular_weight)
min(molWheight)
i_min <- which.min(df_tratado_filtrado$molecular_weight)

#Verificando classe e calculando Desvio Padrão
#Verifying class and calculating standar deviation
class(df_tratado_filtrado$molecular_weight)
standardMW <- sd(df_tratado_filtrado$molecular_weight)

#Calculando Variância
#Calculating Variance
varianciaMW <- var(df_tratado_filtrado$molecular_weight)

#Plots com opacidade alta e baixa 
#Plots with high and low opacity

#HBA x HBD
plot(df_tratado_filtrado$hba, df_tratado_filtrado$hbd, type="p",pch = 8,col = "blue")

#Rotatable Bonds x HBA
plot(df_tratado_filtrado$rotatable_bonds, df_tratado_filtrado$hba, type="p",pch = 8,col = "blue")

#Rotatable Bonds x HBD
plot(df_tratado_filtrado$rotatable_bonds, df_tratado_filtrado$hbd, type="p",pch = 8,col = "blue")

#Ring Count x Rotatable Bonds
plot(df_tratado_filtrado$ring_count, df_tratado_filtrado$rotatable_bonds, type="p",pch = 8,col = "blue")

#Ring Count x HBA
plot(df_tratado_filtrado$ring_count, df_tratado_filtrado$hba, type="p",pch = 8,col = "blue")

#Rotatable Bonds x HBD x Ring Count
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x = rotatable_bonds, y = hbd, alpha = ring_count), color = "blue")

#Rotatable Bonds x HBA x Ring Count
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x = rotatable_bonds, y = hba, alpha = ring_count), color = "blue")

#Gráfico só por curiosidade
#Graphic just for fun
ggplot(data = df_tratado_filtrado) +
  geom_point(mapping = aes(x = rotatable_bonds, y = hbd)) +
  facet_grid(ring_count ~ hba)
