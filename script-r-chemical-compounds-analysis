#Instalando Bibliotecas e Pacotes
#Installing Packages and libraries
install.packages("readxl")
install.packages("tidyverse")
install.packages("data.table")
install.packages("dplyr")
install.packages("ggplot2")
library(dplyr)
library(data.table)
library(tidyverse)
library(readxl)

#Importando Base de Dados
#Importing Data Base
db_chembl <- read.csv2("chEMBLDataBase.csv")

#Filtrando dados
# Creating a Filter for the data
db_chembl_filter <- select(db_chembl,Smiles,HBA,HBD,AlogP,Molecular.Weight,Molecular.Formula,X.Rotatable.Bonds,Polar.Surface.Area)

#Apagando antiga base de dados que tinha colunas indesejadas
#Erasing older data base that had columns that we didn't wanted
rm(db_chembl)

#Visualizando base de dados 
#Viewingdata base
class(db_chembl_filter)
str(db_chembl_filter)
summary(db_chembl_filter)

#Printando para visualizar cada coluna
#Printing to have a better view at the data each column
db_chembl_filter$Smiles 
db_chembl_filter$HBA
db_chembl_filter$HBD
db_chembl_filter$AlogP
db_chembl_filter$Molecular.Weight
db_chembl_filter$Molecular.Formula
db_chembl_filter$X.Rotatable.Bonds
db_chembl_filter$Polar.Surface.Area

#Testando se a função funcionaria antes de mudar o tipo de cada linha
#Testing if the function would work before changing the class of each row
db_chembl_filter_semNA <- na.omit(db_chembl_filter)
db_chembl_filter_semNA$HBD


#Transformando dados em tipo númerico e Caractere e Criando variáveis
#Switching data type and creating variables
hba <- as.numeric(db_chembl_filter$HBA)
hbd <-as.numeric(db_chembl_filter$HBD)
alogp <-as.numeric(db_chembl_filter$AlogP)
molecular_weight <-as.numeric(db_chembl_filter$Molecular.Weight)
rotatable_bonds <-as.numeric(db_chembl_filter$X.Rotatable.Bonds)
psa <-as.numeric(db_chembl_filter$Polar.Surface.Area)
smiles <-as.character(db_chembl_filter$Smiles)
molecular_formula <-as.character(db_chembl_filter$Molecular.Formula)

#Criando novo Data Frame para armazenar novas variáveis e excluindo NA's
#Creating new data frame to load the new variables and excluding the NA's
Novo_df_numerico <- data.frame(hba,hbd,alogp,molecular_formula,molecular_weight,rotatable_bonds,psa,smiles)
df_tratado_filtrado<- na.omit(Novo_df_numerico)



#Calculando Desvio-Padrão
#Standard deviation
desvio_hba <- sd(df_tratado_filtrado$hba)
desvio_hbd <- sd(df_tratado_filtrado$hbd)
desvio_alogp <- sd(df_tratado_filtrado$alogp)
desvio_molecular_weight <- sd(df_tratado_filtrado$molecular_weight)
desvio_psa <- sd(df_tratado_filtrado$psa)
desvio_rotatablebonds <- sd(df_tratado_filtrado$rotatable_bonds)

#Criando Data frame pra unificar em uma tabela
#Creating Data Frame to group everything in a table 
desvio_padrao_tabela <- data.frame(desvio_hba,desvio_hbd,desvio_alogp,desvio_molecular_weight,desvio_psa,desvio_rotatablebonds)

# Correlacao 
# Linear correlation
correlacao_linear <- cor(select(df_tratado_filtrado, alogp, rotatable_bonds, psa, hba, hbd, molecular_weight))

                  
#Variância
#Variance
variancia <- var(df_tratado_filtrado)


#Gráficos 
#Graphics

#Polar Surface Area x Hba
ggplot(df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$hba, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

#Polar Surface Area x Hbd
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$hbd, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

#Polar Surface Area x Molecular Weight
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$molecular_weight, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

#Polar Surface Area x Rotatable Bonds
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$rotatable_bonds, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

#Polar Surface Area x AlogP
ggplot(data=df_tratado_filtrado) + geom_point(mapping = aes(x= df_tratado_filtrado$alogp, y= df_tratado_filtrado$psa, alpha= df_tratado_filtrado$psa)) 

